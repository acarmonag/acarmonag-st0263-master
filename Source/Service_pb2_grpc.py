# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Service_pb2 as Service__pb2


class ProductServiceStub(object):
    """Definición del servicio ProductService
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SearchProduct = channel.unary_stream(
                '/ProductService/SearchProduct',
                request_serializer=Service__pb2.Archive.SerializeToString,
                response_deserializer=Service__pb2.multipleTransactionResponse.FromString,
                )
        self.ListProducts = channel.unary_stream(
                '/ProductService/ListProducts',
                request_serializer=Service__pb2.Empty.SerializeToString,
                response_deserializer=Service__pb2.multipleTransactionResponse.FromString,
                )


class ProductServiceServicer(object):
    """Definición del servicio ProductService
    """

    def SearchProduct(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListProducts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ProductServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SearchProduct': grpc.unary_stream_rpc_method_handler(
                    servicer.SearchProduct,
                    request_deserializer=Service__pb2.Archive.FromString,
                    response_serializer=Service__pb2.multipleTransactionResponse.SerializeToString,
            ),
            'ListProducts': grpc.unary_stream_rpc_method_handler(
                    servicer.ListProducts,
                    request_deserializer=Service__pb2.Empty.FromString,
                    response_serializer=Service__pb2.multipleTransactionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ProductService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ProductService(object):
    """Definición del servicio ProductService
    """

    @staticmethod
    def SearchProduct(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ProductService/SearchProduct',
            Service__pb2.Archive.SerializeToString,
            Service__pb2.multipleTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListProducts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ProductService/ListProducts',
            Service__pb2.Empty.SerializeToString,
            Service__pb2.multipleTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
